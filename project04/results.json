{
    "tests": [
        {
            "score": 15,
            "max_score": 15,
            "name": "test_webcrawler.py::test_request_guard",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 10,
            "name": "test_webcrawler.py::test_invalid_arguments",
            "output": "\ncapsys = <_pytest.capture.CaptureFixture object at 0x11a9a88f0>\n\n    @max_score(10)\n    def test_invalid_arguments(capsys):\n>       do_invalid_args_test(capsys, \"Invalid due to no flag.\")\n\ntest_webcrawler.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_webcrawler.py:18: in do_invalid_args_test\n    run_python_script(str(this_folder / 'webcrawler.py'), *args)\n../.venv/lib/python3.12/site-packages/byu_pytest_utils/utils.py:35: in run_python_script\n    return runpy.run_path(script, _globals, module)\n<frozen runpy>:287: in run_path\n    ???\n<frozen runpy>:98: in _run_module_code\n    ???\n<frozen runpy>:88: in _run_code\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    import sys\n    from RequestGuard import RequestGuard, requests\n    import image_processing\n    from bs4 import BeautifulSoup\n    from urllib.parse import urlparse, urljoin\n    import matplotlib.pyplot as plt\n    \n    \n    def count_links(url, output_1, output_2):\n        links_to_visit = []\n        guard = RequestGuard(url)\n        links_to_visit.append(url)\n        link_counts = {}\n        while links_to_visit:\n            popped = links_to_visit.pop(0)\n            if popped in link_counts:\n                link_counts[popped] += 1\n            else:\n                link_counts[popped] = 1\n                if guard.can_follow_link(popped):\n                    page = guard.make_get_request(popped)\n                    html = BeautifulSoup(page.text,\"html.parser\")\n                    for tag in html.find_all('a'):\n                        href = tag.get('href')\n                        new_url = urljoin(popped, href.split(\"#\")[0])\n                        links_to_visit.append(new_url)\n        generate_plot(links_to_visit, link_counts, output_1, output_2)\n    \n    \n    def generate_plot(links_to_visit, dictionary, output_1, output_2):\n        value = [value for value in dictionary.values()]\n        bin_counts, bin_nums, item = plt.hist(value, bin=range(min(value), max(value) + 2))\n        plt.savefig(output_1) #output 1\n        plt.clf()\n        with open(output_2, \"w\") as file:\n            for i in range(len(bin_counts)):\n                file.write(f\"{bin_counts[i]},{bin_nums}[i]\\n\")\n    \n    \n    \n    if __name__ == \"__main__\":\n>       first_flag = sys.argv[1]\nE       IndexError: list index out of range\n\nwebcrawler.py:42: IndexError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 25,
            "name": "test_webcrawler.py::test_count_links",
            "output": "\nrequest_guard_tests = None\n\n    @ensure_missing(this_folder / 'count_links.output.csv')\n    @ensure_missing(this_folder / 'count_links.output.png')\n    @max_score(25)\n    @patch('requests.get', create_safe_request(max_requests=10))\n    def test_count_links(request_guard_tests):\n        if type(request_guard_tests) == Exception:\n            assert False, 'RequestGuard must work before the rest of the assignment can be tested'\n    \n        plt.clf()\n>       run_python_script(\n            this_folder / 'webcrawler.py', '-c',\n            'https://cs111.byu.edu/Projects/project04/assets/page1.html',\n            this_folder / 'count_links.output.png',\n            this_folder / 'count_links.output.csv'\n        )\n\ntest_webcrawler.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../.venv/lib/python3.12/site-packages/byu_pytest_utils/utils.py:35: in run_python_script\n    return runpy.run_path(script, _globals, module)\n<frozen runpy>:287: in run_path\n    ???\n<frozen runpy>:98: in _run_module_code\n    ???\n<frozen runpy>:88: in _run_code\n    ???\nwebcrawler.py:44: in <module>\n    count_links(sys.argv[2], sys.argv[3], sys.argv[4])\nwebcrawler.py:27: in count_links\n    generate_plot(links_to_visit, link_counts, output_1, output_2)\nwebcrawler.py:32: in generate_plot\n    bin_counts, bin_nums, item = plt.hist(value, bin=range(min(value), max(value) + 2))\n../.venv/lib/python3.12/site-packages/matplotlib/_api/deprecation.py:453: in wrapper\n    return func(*args, **kwargs)\n../.venv/lib/python3.12/site-packages/matplotlib/pyplot.py:3478: in hist\n    return gca().hist(\n../.venv/lib/python3.12/site-packages/matplotlib/_api/deprecation.py:453: in wrapper\n    return func(*args, **kwargs)\n../.venv/lib/python3.12/site-packages/matplotlib/__init__.py:1521: in inner\n    return func(\n../.venv/lib/python3.12/site-packages/matplotlib/axes/_axes.py:7313: in hist\n    p._internal_update(kwargs)\n../.venv/lib/python3.12/site-packages/matplotlib/artist.py:1233: in _internal_update\n    return self._update_props(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <matplotlib.patches.Rectangle object at 0x11af99fa0>\nprops = {'bin': range(1, 7), 'edgecolor': None, 'facecolor': array([0.12156863, 0.46666667, 0.70588235, 1.        ]), 'hatch': None, ...}\nerrfmt = '{cls.__name__}.set() got an unexpected keyword argument {prop_name!r}'\n\n    def _update_props(self, props, errfmt):\n        \"\"\"\n        Helper for `.Artist.set` and `.Artist.update`.\n    \n        *errfmt* is used to generate error messages for invalid property\n        names; it gets formatted with ``type(self)`` for \"{cls}\" and the\n        property name for \"{prop_name}\".\n        \"\"\"\n        ret = []\n        with cbook._setattr_cm(self, eventson=False):\n            for k, v in props.items():\n                # Allow attributes we want to be able to update through\n                # art.update, art.set, setp.\n                if k == \"axes\":\n                    ret.append(setattr(self, k, v))\n                else:\n                    func = getattr(self, f\"set_{k}\", None)\n                    if not callable(func):\n>                       raise AttributeError(\n                            errfmt.format(cls=type(self), prop_name=k),\n                            name=k)\nE                       AttributeError: Rectangle.set() got an unexpected keyword argument 'bin'\n\n../.venv/lib/python3.12/site-packages/matplotlib/artist.py:1206: AttributeError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 12.5,
            "name": "test_webcrawler.py::test_plot_data_two_column",
            "output": "\nrequest_guard_tests = None\n\n    @ensure_missing(this_folder / 'plot_data.output.png')\n    @ensure_missing(this_folder / 'plot_data.output.csv')\n    @max_score(12.5)\n    @patch('requests.get', create_safe_request(max_requests=5))\n    def test_plot_data_two_column(request_guard_tests):\n        if type(request_guard_tests) == Exception:\n            assert False, 'RequestGuard must work before the rest of the assignment can be tested'\n    \n        plt.clf()\n        run_python_script(\n            this_folder / 'webcrawler.py', '-p',\n            'https://cs111.byu.edu/Projects/project04/assets/data.html',\n            this_folder / 'plot_data.output.png',\n            this_folder / 'plot_data.output.csv'\n        )\n    \n>       compare_images(this_folder / 'plot_data.output.png', test_files / 'plot_data.key.png')\n\ntest_webcrawler.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_webcrawler.py:105: in compare_images\n    observed = PILImage.open(obs).convert('RGB')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfp = PosixPath('/Users/graceeputnam/Desktop/cs111/project04/plot_data.output.png')\nmode = 'r', formats = ['PNG']\n\n    def open(\n        fp: StrOrBytesPath | IO[bytes],\n        mode: Literal[\"r\"] = \"r\",\n        formats: list[str] | tuple[str, ...] | None = None,\n    ) -> ImageFile.ImageFile:\n        \"\"\"\n        Opens and identifies the given image file.\n    \n        This is a lazy operation; this function identifies the file, but\n        the file remains open and the actual image data is not read from\n        the file until you try to process the data (or call the\n        :py:meth:`~PIL.Image.Image.load` method).  See\n        :py:func:`~PIL.Image.new`. See :ref:`file-handling`.\n    \n        :param fp: A filename (string), os.PathLike object or a file object.\n           The file object must implement ``file.read``,\n           ``file.seek``, and ``file.tell`` methods,\n           and be opened in binary mode. The file object will also seek to zero\n           before reading.\n        :param mode: The mode.  If given, this argument must be \"r\".\n        :param formats: A list or tuple of formats to attempt to load the file in.\n           This can be used to restrict the set of formats checked.\n           Pass ``None`` to try all supported formats. You can print the set of\n           available formats by running ``python3 -m PIL`` or using\n           the :py:func:`PIL.features.pilinfo` function.\n        :returns: An :py:class:`~PIL.Image.Image` object.\n        :exception FileNotFoundError: If the file cannot be found.\n        :exception PIL.UnidentifiedImageError: If the image cannot be opened and\n           identified.\n        :exception ValueError: If the ``mode`` is not \"r\", or if a ``StringIO``\n           instance is used for ``fp``.\n        :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.\n        \"\"\"\n    \n        if mode != \"r\":\n            msg = f\"bad mode {repr(mode)}\"  # type: ignore[unreachable]\n            raise ValueError(msg)\n        elif isinstance(fp, io.StringIO):\n            msg = (  # type: ignore[unreachable]\n                \"StringIO cannot be used to open an image. \"\n                \"Binary data must be used instead.\"\n            )\n            raise ValueError(msg)\n    \n        if formats is None:\n            formats = ID\n        elif not isinstance(formats, (list, tuple)):\n            msg = \"formats must be a list or tuple\"  # type: ignore[unreachable]\n            raise TypeError(msg)\n    \n        exclusive_fp = False\n        filename: str | bytes = \"\"\n        if is_path(fp):\n            filename = os.path.realpath(os.fspath(fp))\n    \n        if filename:\n>           fp = builtins.open(filename, \"rb\")\nE           FileNotFoundError: [Errno 2] No such file or directory: '/Users/graceeputnam/Desktop/cs111/project04/plot_data.output.png'\n\n../.venv/lib/python3.12/site-packages/PIL/Image.py:3431: FileNotFoundError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 12.5,
            "name": "test_webcrawler.py::test_plot_data_four_column",
            "output": "\nrequest_guard_tests = None\n\n    @ensure_missing(this_folder / 'plot_data2.output.png')\n    @ensure_missing(this_folder / 'plot_data2.output.csv')\n    @max_score(12.5)\n    @patch('requests.get', create_safe_request(max_requests=5))\n    def test_plot_data_four_column(request_guard_tests):\n        if type(request_guard_tests) == Exception:\n            assert False, 'RequestGuard must work before the rest of the assignment can be tested'\n    \n        plt.clf()\n        run_python_script(\n            this_folder / 'webcrawler.py', '-p',\n            'https://cs111.byu.edu/Projects/project04/assets/data2.html',\n            this_folder / 'plot_data2.output.png',\n            this_folder / 'plot_data2.output.csv'\n        )\n    \n>       compare_images(this_folder / 'plot_data2.output.png', test_files / 'plot_data2.key.png')\n\ntest_webcrawler.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_webcrawler.py:105: in compare_images\n    observed = PILImage.open(obs).convert('RGB')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfp = PosixPath('/Users/graceeputnam/Desktop/cs111/project04/plot_data2.output.png')\nmode = 'r', formats = ['PNG']\n\n    def open(\n        fp: StrOrBytesPath | IO[bytes],\n        mode: Literal[\"r\"] = \"r\",\n        formats: list[str] | tuple[str, ...] | None = None,\n    ) -> ImageFile.ImageFile:\n        \"\"\"\n        Opens and identifies the given image file.\n    \n        This is a lazy operation; this function identifies the file, but\n        the file remains open and the actual image data is not read from\n        the file until you try to process the data (or call the\n        :py:meth:`~PIL.Image.Image.load` method).  See\n        :py:func:`~PIL.Image.new`. See :ref:`file-handling`.\n    \n        :param fp: A filename (string), os.PathLike object or a file object.\n           The file object must implement ``file.read``,\n           ``file.seek``, and ``file.tell`` methods,\n           and be opened in binary mode. The file object will also seek to zero\n           before reading.\n        :param mode: The mode.  If given, this argument must be \"r\".\n        :param formats: A list or tuple of formats to attempt to load the file in.\n           This can be used to restrict the set of formats checked.\n           Pass ``None`` to try all supported formats. You can print the set of\n           available formats by running ``python3 -m PIL`` or using\n           the :py:func:`PIL.features.pilinfo` function.\n        :returns: An :py:class:`~PIL.Image.Image` object.\n        :exception FileNotFoundError: If the file cannot be found.\n        :exception PIL.UnidentifiedImageError: If the image cannot be opened and\n           identified.\n        :exception ValueError: If the ``mode`` is not \"r\", or if a ``StringIO``\n           instance is used for ``fp``.\n        :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.\n        \"\"\"\n    \n        if mode != \"r\":\n            msg = f\"bad mode {repr(mode)}\"  # type: ignore[unreachable]\n            raise ValueError(msg)\n        elif isinstance(fp, io.StringIO):\n            msg = (  # type: ignore[unreachable]\n                \"StringIO cannot be used to open an image. \"\n                \"Binary data must be used instead.\"\n            )\n            raise ValueError(msg)\n    \n        if formats is None:\n            formats = ID\n        elif not isinstance(formats, (list, tuple)):\n            msg = \"formats must be a list or tuple\"  # type: ignore[unreachable]\n            raise TypeError(msg)\n    \n        exclusive_fp = False\n        filename: str | bytes = \"\"\n        if is_path(fp):\n            filename = os.path.realpath(os.fspath(fp))\n    \n        if filename:\n>           fp = builtins.open(filename, \"rb\")\nE           FileNotFoundError: [Errno 2] No such file or directory: '/Users/graceeputnam/Desktop/cs111/project04/plot_data2.output.png'\n\n../.venv/lib/python3.12/site-packages/PIL/Image.py:3431: FileNotFoundError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 6.25,
            "name": "test_webcrawler.py::test_modify_images_sepia",
            "output": "Invalid arguments\n\nrequest_guard_tests = None\n\n    @ensure_missing(this_folder / 's_flamingo-float.png')\n    @ensure_missing(this_folder / 's_landscape.png')\n    @ensure_missing(this_folder / 'flamingo-float.png')\n    @ensure_missing(this_folder / 'landscape.png')\n    @max_score(6.25)\n    @patch('requests.get', create_safe_request(max_requests=5))\n    def test_modify_images_sepia(request_guard_tests):\n        if type(request_guard_tests) == Exception:\n            assert False, 'RequestGuard must work before the rest of the assignment can be tested'\n>       modify_images_test(['flamingo-float.png', 'landscape.png'], 's_', '-s')\n\ntest_webcrawler.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_webcrawler.py:228: in modify_images_test\n    compare_images(this_folder / f'{prefix}{image}', test_files / f'{prefix}{image}')\ntest_webcrawler.py:105: in compare_images\n    observed = PILImage.open(obs).convert('RGB')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfp = PosixPath('/Users/graceeputnam/Desktop/cs111/project04/s_flamingo-float.png')\nmode = 'r', formats = ['PNG']\n\n    def open(\n        fp: StrOrBytesPath | IO[bytes],\n        mode: Literal[\"r\"] = \"r\",\n        formats: list[str] | tuple[str, ...] | None = None,\n    ) -> ImageFile.ImageFile:\n        \"\"\"\n        Opens and identifies the given image file.\n    \n        This is a lazy operation; this function identifies the file, but\n        the file remains open and the actual image data is not read from\n        the file until you try to process the data (or call the\n        :py:meth:`~PIL.Image.Image.load` method).  See\n        :py:func:`~PIL.Image.new`. See :ref:`file-handling`.\n    \n        :param fp: A filename (string), os.PathLike object or a file object.\n           The file object must implement ``file.read``,\n           ``file.seek``, and ``file.tell`` methods,\n           and be opened in binary mode. The file object will also seek to zero\n           before reading.\n        :param mode: The mode.  If given, this argument must be \"r\".\n        :param formats: A list or tuple of formats to attempt to load the file in.\n           This can be used to restrict the set of formats checked.\n           Pass ``None`` to try all supported formats. You can print the set of\n           available formats by running ``python3 -m PIL`` or using\n           the :py:func:`PIL.features.pilinfo` function.\n        :returns: An :py:class:`~PIL.Image.Image` object.\n        :exception FileNotFoundError: If the file cannot be found.\n        :exception PIL.UnidentifiedImageError: If the image cannot be opened and\n           identified.\n        :exception ValueError: If the ``mode`` is not \"r\", or if a ``StringIO``\n           instance is used for ``fp``.\n        :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.\n        \"\"\"\n    \n        if mode != \"r\":\n            msg = f\"bad mode {repr(mode)}\"  # type: ignore[unreachable]\n            raise ValueError(msg)\n        elif isinstance(fp, io.StringIO):\n            msg = (  # type: ignore[unreachable]\n                \"StringIO cannot be used to open an image. \"\n                \"Binary data must be used instead.\"\n            )\n            raise ValueError(msg)\n    \n        if formats is None:\n            formats = ID\n        elif not isinstance(formats, (list, tuple)):\n            msg = \"formats must be a list or tuple\"  # type: ignore[unreachable]\n            raise TypeError(msg)\n    \n        exclusive_fp = False\n        filename: str | bytes = \"\"\n        if is_path(fp):\n            filename = os.path.realpath(os.fspath(fp))\n    \n        if filename:\n>           fp = builtins.open(filename, \"rb\")\nE           FileNotFoundError: [Errno 2] No such file or directory: '/Users/graceeputnam/Desktop/cs111/project04/s_flamingo-float.png'\n\n../.venv/lib/python3.12/site-packages/PIL/Image.py:3431: FileNotFoundError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 6.25,
            "name": "test_webcrawler.py::test_modify_images_grayscale",
            "output": "Invalid arguments\n\nrequest_guard_tests = None\n\n    @ensure_missing(this_folder / 'g_flamingo-float.png')\n    @ensure_missing(this_folder / 'g_landscape.png')\n    @ensure_missing(this_folder / 'flamingo-float.png')\n    @ensure_missing(this_folder / 'landscape.png')\n    @max_score(6.25)\n    @patch('requests.get', create_safe_request(max_requests=5))\n    def test_modify_images_grayscale(request_guard_tests):\n        if type(request_guard_tests) == Exception:\n            assert False, 'RequestGuard must work before the rest of the assignment can be tested'\n>       modify_images_test(['flamingo-float.png', 'landscape.png'], 'g_', '-g')\n\ntest_webcrawler.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_webcrawler.py:228: in modify_images_test\n    compare_images(this_folder / f'{prefix}{image}', test_files / f'{prefix}{image}')\ntest_webcrawler.py:105: in compare_images\n    observed = PILImage.open(obs).convert('RGB')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfp = PosixPath('/Users/graceeputnam/Desktop/cs111/project04/g_flamingo-float.png')\nmode = 'r', formats = ['PNG']\n\n    def open(\n        fp: StrOrBytesPath | IO[bytes],\n        mode: Literal[\"r\"] = \"r\",\n        formats: list[str] | tuple[str, ...] | None = None,\n    ) -> ImageFile.ImageFile:\n        \"\"\"\n        Opens and identifies the given image file.\n    \n        This is a lazy operation; this function identifies the file, but\n        the file remains open and the actual image data is not read from\n        the file until you try to process the data (or call the\n        :py:meth:`~PIL.Image.Image.load` method).  See\n        :py:func:`~PIL.Image.new`. See :ref:`file-handling`.\n    \n        :param fp: A filename (string), os.PathLike object or a file object.\n           The file object must implement ``file.read``,\n           ``file.seek``, and ``file.tell`` methods,\n           and be opened in binary mode. The file object will also seek to zero\n           before reading.\n        :param mode: The mode.  If given, this argument must be \"r\".\n        :param formats: A list or tuple of formats to attempt to load the file in.\n           This can be used to restrict the set of formats checked.\n           Pass ``None`` to try all supported formats. You can print the set of\n           available formats by running ``python3 -m PIL`` or using\n           the :py:func:`PIL.features.pilinfo` function.\n        :returns: An :py:class:`~PIL.Image.Image` object.\n        :exception FileNotFoundError: If the file cannot be found.\n        :exception PIL.UnidentifiedImageError: If the image cannot be opened and\n           identified.\n        :exception ValueError: If the ``mode`` is not \"r\", or if a ``StringIO``\n           instance is used for ``fp``.\n        :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.\n        \"\"\"\n    \n        if mode != \"r\":\n            msg = f\"bad mode {repr(mode)}\"  # type: ignore[unreachable]\n            raise ValueError(msg)\n        elif isinstance(fp, io.StringIO):\n            msg = (  # type: ignore[unreachable]\n                \"StringIO cannot be used to open an image. \"\n                \"Binary data must be used instead.\"\n            )\n            raise ValueError(msg)\n    \n        if formats is None:\n            formats = ID\n        elif not isinstance(formats, (list, tuple)):\n            msg = \"formats must be a list or tuple\"  # type: ignore[unreachable]\n            raise TypeError(msg)\n    \n        exclusive_fp = False\n        filename: str | bytes = \"\"\n        if is_path(fp):\n            filename = os.path.realpath(os.fspath(fp))\n    \n        if filename:\n>           fp = builtins.open(filename, \"rb\")\nE           FileNotFoundError: [Errno 2] No such file or directory: '/Users/graceeputnam/Desktop/cs111/project04/g_flamingo-float.png'\n\n../.venv/lib/python3.12/site-packages/PIL/Image.py:3431: FileNotFoundError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 6.25,
            "name": "test_webcrawler.py::test_modify_images_vertical_flip",
            "output": "Invalid arguments\n\nrequest_guard_tests = None\n\n    @ensure_missing(this_folder / 'f_flamingo-float.png')\n    @ensure_missing(this_folder / 'f_landscape.png')\n    @ensure_missing(this_folder / 'flamingo-float.png')\n    @ensure_missing(this_folder / 'landscape.png')\n    @max_score(6.25)\n    @patch('requests.get', create_safe_request(max_requests=5))\n    def test_modify_images_vertical_flip(request_guard_tests):\n        if type(request_guard_tests) == Exception:\n            assert False, 'RequestGuard must work before the rest of the assignment can be tested'\n>       modify_images_test(['flamingo-float.png', 'landscape.png'], 'f_', '-f')\n\ntest_webcrawler.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_webcrawler.py:228: in modify_images_test\n    compare_images(this_folder / f'{prefix}{image}', test_files / f'{prefix}{image}')\ntest_webcrawler.py:105: in compare_images\n    observed = PILImage.open(obs).convert('RGB')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfp = PosixPath('/Users/graceeputnam/Desktop/cs111/project04/f_flamingo-float.png')\nmode = 'r', formats = ['PNG']\n\n    def open(\n        fp: StrOrBytesPath | IO[bytes],\n        mode: Literal[\"r\"] = \"r\",\n        formats: list[str] | tuple[str, ...] | None = None,\n    ) -> ImageFile.ImageFile:\n        \"\"\"\n        Opens and identifies the given image file.\n    \n        This is a lazy operation; this function identifies the file, but\n        the file remains open and the actual image data is not read from\n        the file until you try to process the data (or call the\n        :py:meth:`~PIL.Image.Image.load` method).  See\n        :py:func:`~PIL.Image.new`. See :ref:`file-handling`.\n    \n        :param fp: A filename (string), os.PathLike object or a file object.\n           The file object must implement ``file.read``,\n           ``file.seek``, and ``file.tell`` methods,\n           and be opened in binary mode. The file object will also seek to zero\n           before reading.\n        :param mode: The mode.  If given, this argument must be \"r\".\n        :param formats: A list or tuple of formats to attempt to load the file in.\n           This can be used to restrict the set of formats checked.\n           Pass ``None`` to try all supported formats. You can print the set of\n           available formats by running ``python3 -m PIL`` or using\n           the :py:func:`PIL.features.pilinfo` function.\n        :returns: An :py:class:`~PIL.Image.Image` object.\n        :exception FileNotFoundError: If the file cannot be found.\n        :exception PIL.UnidentifiedImageError: If the image cannot be opened and\n           identified.\n        :exception ValueError: If the ``mode`` is not \"r\", or if a ``StringIO``\n           instance is used for ``fp``.\n        :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.\n        \"\"\"\n    \n        if mode != \"r\":\n            msg = f\"bad mode {repr(mode)}\"  # type: ignore[unreachable]\n            raise ValueError(msg)\n        elif isinstance(fp, io.StringIO):\n            msg = (  # type: ignore[unreachable]\n                \"StringIO cannot be used to open an image. \"\n                \"Binary data must be used instead.\"\n            )\n            raise ValueError(msg)\n    \n        if formats is None:\n            formats = ID\n        elif not isinstance(formats, (list, tuple)):\n            msg = \"formats must be a list or tuple\"  # type: ignore[unreachable]\n            raise TypeError(msg)\n    \n        exclusive_fp = False\n        filename: str | bytes = \"\"\n        if is_path(fp):\n            filename = os.path.realpath(os.fspath(fp))\n    \n        if filename:\n>           fp = builtins.open(filename, \"rb\")\nE           FileNotFoundError: [Errno 2] No such file or directory: '/Users/graceeputnam/Desktop/cs111/project04/f_flamingo-float.png'\n\n../.venv/lib/python3.12/site-packages/PIL/Image.py:3431: FileNotFoundError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 6.25,
            "name": "test_webcrawler.py::test_modify_images_horizontal_flip",
            "output": "\nrequest_guard_tests = None\n\n    @ensure_missing(this_folder / 'm_flamingo-float.png')\n    @ensure_missing(this_folder / 'm_landscape.png')\n    @ensure_missing(this_folder / 'flamingo-float.png')\n    @ensure_missing(this_folder / 'landscape.png')\n    @max_score(6.25)\n    @patch('requests.get', create_safe_request(max_requests=5))\n    def test_modify_images_horizontal_flip(request_guard_tests):\n        if type(request_guard_tests) == Exception:\n            assert False, 'RequestGuard must work before the rest of the assignment can be tested'\n>       modify_images_test(['flamingo-float.png', 'landscape.png'], 'm_', '-m')\n\ntest_webcrawler.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_webcrawler.py:228: in modify_images_test\n    compare_images(this_folder / f'{prefix}{image}', test_files / f'{prefix}{image}')\ntest_webcrawler.py:105: in compare_images\n    observed = PILImage.open(obs).convert('RGB')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfp = PosixPath('/Users/graceeputnam/Desktop/cs111/project04/m_flamingo-float.png')\nmode = 'r', formats = ['PNG']\n\n    def open(\n        fp: StrOrBytesPath | IO[bytes],\n        mode: Literal[\"r\"] = \"r\",\n        formats: list[str] | tuple[str, ...] | None = None,\n    ) -> ImageFile.ImageFile:\n        \"\"\"\n        Opens and identifies the given image file.\n    \n        This is a lazy operation; this function identifies the file, but\n        the file remains open and the actual image data is not read from\n        the file until you try to process the data (or call the\n        :py:meth:`~PIL.Image.Image.load` method).  See\n        :py:func:`~PIL.Image.new`. See :ref:`file-handling`.\n    \n        :param fp: A filename (string), os.PathLike object or a file object.\n           The file object must implement ``file.read``,\n           ``file.seek``, and ``file.tell`` methods,\n           and be opened in binary mode. The file object will also seek to zero\n           before reading.\n        :param mode: The mode.  If given, this argument must be \"r\".\n        :param formats: A list or tuple of formats to attempt to load the file in.\n           This can be used to restrict the set of formats checked.\n           Pass ``None`` to try all supported formats. You can print the set of\n           available formats by running ``python3 -m PIL`` or using\n           the :py:func:`PIL.features.pilinfo` function.\n        :returns: An :py:class:`~PIL.Image.Image` object.\n        :exception FileNotFoundError: If the file cannot be found.\n        :exception PIL.UnidentifiedImageError: If the image cannot be opened and\n           identified.\n        :exception ValueError: If the ``mode`` is not \"r\", or if a ``StringIO``\n           instance is used for ``fp``.\n        :exception TypeError: If ``formats`` is not ``None``, a list or a tuple.\n        \"\"\"\n    \n        if mode != \"r\":\n            msg = f\"bad mode {repr(mode)}\"  # type: ignore[unreachable]\n            raise ValueError(msg)\n        elif isinstance(fp, io.StringIO):\n            msg = (  # type: ignore[unreachable]\n                \"StringIO cannot be used to open an image. \"\n                \"Binary data must be used instead.\"\n            )\n            raise ValueError(msg)\n    \n        if formats is None:\n            formats = ID\n        elif not isinstance(formats, (list, tuple)):\n            msg = \"formats must be a list or tuple\"  # type: ignore[unreachable]\n            raise TypeError(msg)\n    \n        exclusive_fp = False\n        filename: str | bytes = \"\"\n        if is_path(fp):\n            filename = os.path.realpath(os.fspath(fp))\n    \n        if filename:\n>           fp = builtins.open(filename, \"rb\")\nE           FileNotFoundError: [Errno 2] No such file or directory: '/Users/graceeputnam/Desktop/cs111/project04/m_flamingo-float.png'\n\n../.venv/lib/python3.12/site-packages/PIL/Image.py:3431: FileNotFoundError",
            "visibility": "visible"
        }
    ]
}